// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spacecraft/ent/armament"
	"spacecraft/ent/predicate"
	"spacecraft/ent/spacecraft"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArmamentUpdate is the builder for updating Armament entities.
type ArmamentUpdate struct {
	config
	hooks    []Hook
	mutation *ArmamentMutation
}

// Where appends a list predicates to the ArmamentUpdate builder.
func (au *ArmamentUpdate) Where(ps ...predicate.Armament) *ArmamentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTitle sets the "title" field.
func (au *ArmamentUpdate) SetTitle(s string) *ArmamentUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetQty sets the "qty" field.
func (au *ArmamentUpdate) SetQty(i int) *ArmamentUpdate {
	au.mutation.ResetQty()
	au.mutation.SetQty(i)
	return au
}

// AddQty adds i to the "qty" field.
func (au *ArmamentUpdate) AddQty(i int) *ArmamentUpdate {
	au.mutation.AddQty(i)
	return au
}

// AddSpacecraftIDs adds the "Spacecraft" edge to the Spacecraft entity by IDs.
func (au *ArmamentUpdate) AddSpacecraftIDs(ids ...int) *ArmamentUpdate {
	au.mutation.AddSpacecraftIDs(ids...)
	return au
}

// AddSpacecraft adds the "Spacecraft" edges to the Spacecraft entity.
func (au *ArmamentUpdate) AddSpacecraft(s ...*Spacecraft) *ArmamentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSpacecraftIDs(ids...)
}

// Mutation returns the ArmamentMutation object of the builder.
func (au *ArmamentUpdate) Mutation() *ArmamentMutation {
	return au.mutation
}

// ClearSpacecraft clears all "Spacecraft" edges to the Spacecraft entity.
func (au *ArmamentUpdate) ClearSpacecraft() *ArmamentUpdate {
	au.mutation.ClearSpacecraft()
	return au
}

// RemoveSpacecraftIDs removes the "Spacecraft" edge to Spacecraft entities by IDs.
func (au *ArmamentUpdate) RemoveSpacecraftIDs(ids ...int) *ArmamentUpdate {
	au.mutation.RemoveSpacecraftIDs(ids...)
	return au
}

// RemoveSpacecraft removes "Spacecraft" edges to Spacecraft entities.
func (au *ArmamentUpdate) RemoveSpacecraft(s ...*Spacecraft) *ArmamentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSpacecraftIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArmamentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArmamentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArmamentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArmamentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ArmamentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(armament.Table, armament.Columns, sqlgraph.NewFieldSpec(armament.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(armament.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Qty(); ok {
		_spec.SetField(armament.FieldQty, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedQty(); ok {
		_spec.AddField(armament.FieldQty, field.TypeInt, value)
	}
	if au.mutation.SpacecraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   armament.SpacecraftTable,
			Columns: armament.SpacecraftPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSpacecraftIDs(); len(nodes) > 0 && !au.mutation.SpacecraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   armament.SpacecraftTable,
			Columns: armament.SpacecraftPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SpacecraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   armament.SpacecraftTable,
			Columns: armament.SpacecraftPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{armament.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArmamentUpdateOne is the builder for updating a single Armament entity.
type ArmamentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArmamentMutation
}

// SetTitle sets the "title" field.
func (auo *ArmamentUpdateOne) SetTitle(s string) *ArmamentUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetQty sets the "qty" field.
func (auo *ArmamentUpdateOne) SetQty(i int) *ArmamentUpdateOne {
	auo.mutation.ResetQty()
	auo.mutation.SetQty(i)
	return auo
}

// AddQty adds i to the "qty" field.
func (auo *ArmamentUpdateOne) AddQty(i int) *ArmamentUpdateOne {
	auo.mutation.AddQty(i)
	return auo
}

// AddSpacecraftIDs adds the "Spacecraft" edge to the Spacecraft entity by IDs.
func (auo *ArmamentUpdateOne) AddSpacecraftIDs(ids ...int) *ArmamentUpdateOne {
	auo.mutation.AddSpacecraftIDs(ids...)
	return auo
}

// AddSpacecraft adds the "Spacecraft" edges to the Spacecraft entity.
func (auo *ArmamentUpdateOne) AddSpacecraft(s ...*Spacecraft) *ArmamentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSpacecraftIDs(ids...)
}

// Mutation returns the ArmamentMutation object of the builder.
func (auo *ArmamentUpdateOne) Mutation() *ArmamentMutation {
	return auo.mutation
}

// ClearSpacecraft clears all "Spacecraft" edges to the Spacecraft entity.
func (auo *ArmamentUpdateOne) ClearSpacecraft() *ArmamentUpdateOne {
	auo.mutation.ClearSpacecraft()
	return auo
}

// RemoveSpacecraftIDs removes the "Spacecraft" edge to Spacecraft entities by IDs.
func (auo *ArmamentUpdateOne) RemoveSpacecraftIDs(ids ...int) *ArmamentUpdateOne {
	auo.mutation.RemoveSpacecraftIDs(ids...)
	return auo
}

// RemoveSpacecraft removes "Spacecraft" edges to Spacecraft entities.
func (auo *ArmamentUpdateOne) RemoveSpacecraft(s ...*Spacecraft) *ArmamentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSpacecraftIDs(ids...)
}

// Where appends a list predicates to the ArmamentUpdate builder.
func (auo *ArmamentUpdateOne) Where(ps ...predicate.Armament) *ArmamentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArmamentUpdateOne) Select(field string, fields ...string) *ArmamentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Armament entity.
func (auo *ArmamentUpdateOne) Save(ctx context.Context) (*Armament, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArmamentUpdateOne) SaveX(ctx context.Context) *Armament {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArmamentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArmamentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ArmamentUpdateOne) sqlSave(ctx context.Context) (_node *Armament, err error) {
	_spec := sqlgraph.NewUpdateSpec(armament.Table, armament.Columns, sqlgraph.NewFieldSpec(armament.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Armament.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, armament.FieldID)
		for _, f := range fields {
			if !armament.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != armament.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(armament.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Qty(); ok {
		_spec.SetField(armament.FieldQty, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedQty(); ok {
		_spec.AddField(armament.FieldQty, field.TypeInt, value)
	}
	if auo.mutation.SpacecraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   armament.SpacecraftTable,
			Columns: armament.SpacecraftPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSpacecraftIDs(); len(nodes) > 0 && !auo.mutation.SpacecraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   armament.SpacecraftTable,
			Columns: armament.SpacecraftPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SpacecraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   armament.SpacecraftTable,
			Columns: armament.SpacecraftPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Armament{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{armament.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
