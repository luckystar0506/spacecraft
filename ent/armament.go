// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"spacecraft/ent/armament"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Armament is the model entity for the Armament schema.
type Armament struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty int `json:"qty,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArmamentQuery when eager-loading is set.
	Edges        ArmamentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArmamentEdges holds the relations/edges for other nodes in the graph.
type ArmamentEdges struct {
	// Spacecraft holds the value of the Spacecraft edge.
	Spacecraft []*Spacecraft `json:"Spacecraft,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SpacecraftOrErr returns the Spacecraft value or an error if the edge
// was not loaded in eager-loading.
func (e ArmamentEdges) SpacecraftOrErr() ([]*Spacecraft, error) {
	if e.loadedTypes[0] {
		return e.Spacecraft, nil
	}
	return nil, &NotLoadedError{edge: "Spacecraft"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Armament) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case armament.FieldID, armament.FieldQty:
			values[i] = new(sql.NullInt64)
		case armament.FieldTitle:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Armament fields.
func (a *Armament) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case armament.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case armament.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case armament.FieldQty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				a.Qty = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Armament.
// This includes values selected through modifiers, order, etc.
func (a *Armament) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QuerySpacecraft queries the "Spacecraft" edge of the Armament entity.
func (a *Armament) QuerySpacecraft() *SpacecraftQuery {
	return NewArmamentClient(a.config).QuerySpacecraft(a)
}

// Update returns a builder for updating this Armament.
// Note that you need to call Armament.Unwrap() before calling this method if this Armament
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Armament) Update() *ArmamentUpdateOne {
	return NewArmamentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Armament entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Armament) Unwrap() *Armament {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Armament is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Armament) String() string {
	var builder strings.Builder
	builder.WriteString("Armament(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("title=")
	builder.WriteString(a.Title)
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", a.Qty))
	builder.WriteByte(')')
	return builder.String()
}

// Armaments is a parsable slice of Armament.
type Armaments []*Armament
