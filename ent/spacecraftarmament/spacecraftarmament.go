// Code generated by ent, DO NOT EDIT.

package spacecraftarmament

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the spacecraftarmament type in the database.
	Label = "spacecraft_armament"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQty holds the string denoting the qty field in the database.
	FieldQty = "qty"
	// FieldSpacecraftID holds the string denoting the spacecraft_id field in the database.
	FieldSpacecraftID = "spacecraft_id"
	// FieldArmamentID holds the string denoting the armament_id field in the database.
	FieldArmamentID = "armament_id"
	// EdgeSpacecraft holds the string denoting the spacecraft edge name in mutations.
	EdgeSpacecraft = "spacecraft"
	// EdgeArmament holds the string denoting the armament edge name in mutations.
	EdgeArmament = "armament"
	// Table holds the table name of the spacecraftarmament in the database.
	Table = "spacecraft_armaments"
	// SpacecraftTable is the table that holds the spacecraft relation/edge.
	SpacecraftTable = "spacecraft_armaments"
	// SpacecraftInverseTable is the table name for the Spacecraft entity.
	// It exists in this package in order to avoid circular dependency with the "spacecraft" package.
	SpacecraftInverseTable = "spacecrafts"
	// SpacecraftColumn is the table column denoting the spacecraft relation/edge.
	SpacecraftColumn = "spacecraft_id"
	// ArmamentTable is the table that holds the armament relation/edge.
	ArmamentTable = "spacecraft_armaments"
	// ArmamentInverseTable is the table name for the Armament entity.
	// It exists in this package in order to avoid circular dependency with the "armament" package.
	ArmamentInverseTable = "armaments"
	// ArmamentColumn is the table column denoting the armament relation/edge.
	ArmamentColumn = "armament_id"
)

// Columns holds all SQL columns for spacecraftarmament fields.
var Columns = []string{
	FieldID,
	FieldQty,
	FieldSpacecraftID,
	FieldArmamentID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SpacecraftArmament queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQty orders the results by the qty field.
func ByQty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQty, opts...).ToFunc()
}

// BySpacecraftID orders the results by the spacecraft_id field.
func BySpacecraftID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpacecraftID, opts...).ToFunc()
}

// ByArmamentID orders the results by the armament_id field.
func ByArmamentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArmamentID, opts...).ToFunc()
}

// BySpacecraftField orders the results by spacecraft field.
func BySpacecraftField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSpacecraftStep(), sql.OrderByField(field, opts...))
	}
}

// ByArmamentField orders the results by armament field.
func ByArmamentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArmamentStep(), sql.OrderByField(field, opts...))
	}
}
func newSpacecraftStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SpacecraftInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SpacecraftTable, SpacecraftColumn),
	)
}
func newArmamentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArmamentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ArmamentTable, ArmamentColumn),
	)
}
