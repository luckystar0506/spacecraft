// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spacecraft/ent/armament"
	"spacecraft/ent/spacecraft"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpacecraftCreate is the builder for creating a Spacecraft entity.
type SpacecraftCreate struct {
	config
	mutation *SpacecraftMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *SpacecraftCreate) SetName(s string) *SpacecraftCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetClass sets the "class" field.
func (sc *SpacecraftCreate) SetClass(s string) *SpacecraftCreate {
	sc.mutation.SetClass(s)
	return sc
}

// SetCrew sets the "crew" field.
func (sc *SpacecraftCreate) SetCrew(i int) *SpacecraftCreate {
	sc.mutation.SetCrew(i)
	return sc
}

// SetImage sets the "image" field.
func (sc *SpacecraftCreate) SetImage(s string) *SpacecraftCreate {
	sc.mutation.SetImage(s)
	return sc
}

// SetValue sets the "value" field.
func (sc *SpacecraftCreate) SetValue(f float64) *SpacecraftCreate {
	sc.mutation.SetValue(f)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SpacecraftCreate) SetStatus(s string) *SpacecraftCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// AddArmamentIDs adds the "armaments" edge to the Armament entity by IDs.
func (sc *SpacecraftCreate) AddArmamentIDs(ids ...int) *SpacecraftCreate {
	sc.mutation.AddArmamentIDs(ids...)
	return sc
}

// AddArmaments adds the "armaments" edges to the Armament entity.
func (sc *SpacecraftCreate) AddArmaments(a ...*Armament) *SpacecraftCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddArmamentIDs(ids...)
}

// Mutation returns the SpacecraftMutation object of the builder.
func (sc *SpacecraftCreate) Mutation() *SpacecraftMutation {
	return sc.mutation
}

// Save creates the Spacecraft in the database.
func (sc *SpacecraftCreate) Save(ctx context.Context) (*Spacecraft, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpacecraftCreate) SaveX(ctx context.Context) *Spacecraft {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SpacecraftCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SpacecraftCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SpacecraftCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Spacecraft.name"`)}
	}
	if _, ok := sc.mutation.Class(); !ok {
		return &ValidationError{Name: "class", err: errors.New(`ent: missing required field "Spacecraft.class"`)}
	}
	if _, ok := sc.mutation.Crew(); !ok {
		return &ValidationError{Name: "crew", err: errors.New(`ent: missing required field "Spacecraft.crew"`)}
	}
	if _, ok := sc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Spacecraft.image"`)}
	}
	if _, ok := sc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Spacecraft.value"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Spacecraft.status"`)}
	}
	return nil
}

func (sc *SpacecraftCreate) sqlSave(ctx context.Context) (*Spacecraft, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SpacecraftCreate) createSpec() (*Spacecraft, *sqlgraph.CreateSpec) {
	var (
		_node = &Spacecraft{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(spacecraft.Table, sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(spacecraft.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Class(); ok {
		_spec.SetField(spacecraft.FieldClass, field.TypeString, value)
		_node.Class = value
	}
	if value, ok := sc.mutation.Crew(); ok {
		_spec.SetField(spacecraft.FieldCrew, field.TypeInt, value)
		_node.Crew = value
	}
	if value, ok := sc.mutation.Image(); ok {
		_spec.SetField(spacecraft.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := sc.mutation.Value(); ok {
		_spec.SetField(spacecraft.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(spacecraft.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := sc.mutation.ArmamentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spacecraft.ArmamentsTable,
			Columns: spacecraft.ArmamentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(armament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SpacecraftCreateBulk is the builder for creating many Spacecraft entities in bulk.
type SpacecraftCreateBulk struct {
	config
	err      error
	builders []*SpacecraftCreate
}

// Save creates the Spacecraft entities in the database.
func (scb *SpacecraftCreateBulk) Save(ctx context.Context) ([]*Spacecraft, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Spacecraft, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpacecraftMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SpacecraftCreateBulk) SaveX(ctx context.Context) []*Spacecraft {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SpacecraftCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SpacecraftCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
