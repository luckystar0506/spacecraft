// Code generated by ent, DO NOT EDIT.

package armament

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the armament type in the database.
	Label = "armament"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldQty holds the string denoting the qty field in the database.
	FieldQty = "qty"
	// EdgeSpacecraft holds the string denoting the spacecraft edge name in mutations.
	EdgeSpacecraft = "Spacecraft"
	// Table holds the table name of the armament in the database.
	Table = "armaments"
	// SpacecraftTable is the table that holds the Spacecraft relation/edge. The primary key declared below.
	SpacecraftTable = "spacecraft_armaments"
	// SpacecraftInverseTable is the table name for the Spacecraft entity.
	// It exists in this package in order to avoid circular dependency with the "spacecraft" package.
	SpacecraftInverseTable = "spacecrafts"
)

// Columns holds all SQL columns for armament fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldQty,
}

var (
	// SpacecraftPrimaryKey and SpacecraftColumn2 are the table columns denoting the
	// primary key for the Spacecraft relation (M2M).
	SpacecraftPrimaryKey = []string{"spacecraft_id", "armament_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Armament queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByQty orders the results by the qty field.
func ByQty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQty, opts...).ToFunc()
}

// BySpacecraftCount orders the results by Spacecraft count.
func BySpacecraftCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSpacecraftStep(), opts...)
	}
}

// BySpacecraft orders the results by Spacecraft terms.
func BySpacecraft(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSpacecraftStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSpacecraftStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SpacecraftInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SpacecraftTable, SpacecraftPrimaryKey...),
	)
}
