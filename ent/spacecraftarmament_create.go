// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spacecraft/ent/armament"
	"spacecraft/ent/spacecraft"
	"spacecraft/ent/spacecraftarmament"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpacecraftArmamentCreate is the builder for creating a SpacecraftArmament entity.
type SpacecraftArmamentCreate struct {
	config
	mutation *SpacecraftArmamentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetQty sets the "qty" field.
func (sac *SpacecraftArmamentCreate) SetQty(i int) *SpacecraftArmamentCreate {
	sac.mutation.SetQty(i)
	return sac
}

// SetSpacecraftID sets the "spacecraft_id" field.
func (sac *SpacecraftArmamentCreate) SetSpacecraftID(i int) *SpacecraftArmamentCreate {
	sac.mutation.SetSpacecraftID(i)
	return sac
}

// SetArmamentID sets the "armament_id" field.
func (sac *SpacecraftArmamentCreate) SetArmamentID(i int) *SpacecraftArmamentCreate {
	sac.mutation.SetArmamentID(i)
	return sac
}

// SetSpacecraft sets the "spacecraft" edge to the Spacecraft entity.
func (sac *SpacecraftArmamentCreate) SetSpacecraft(s *Spacecraft) *SpacecraftArmamentCreate {
	return sac.SetSpacecraftID(s.ID)
}

// SetArmament sets the "armament" edge to the Armament entity.
func (sac *SpacecraftArmamentCreate) SetArmament(a *Armament) *SpacecraftArmamentCreate {
	return sac.SetArmamentID(a.ID)
}

// Mutation returns the SpacecraftArmamentMutation object of the builder.
func (sac *SpacecraftArmamentCreate) Mutation() *SpacecraftArmamentMutation {
	return sac.mutation
}

// Save creates the SpacecraftArmament in the database.
func (sac *SpacecraftArmamentCreate) Save(ctx context.Context) (*SpacecraftArmament, error) {
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SpacecraftArmamentCreate) SaveX(ctx context.Context) *SpacecraftArmament {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SpacecraftArmamentCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SpacecraftArmamentCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *SpacecraftArmamentCreate) check() error {
	if _, ok := sac.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`ent: missing required field "SpacecraftArmament.qty"`)}
	}
	if _, ok := sac.mutation.SpacecraftID(); !ok {
		return &ValidationError{Name: "spacecraft_id", err: errors.New(`ent: missing required field "SpacecraftArmament.spacecraft_id"`)}
	}
	if _, ok := sac.mutation.ArmamentID(); !ok {
		return &ValidationError{Name: "armament_id", err: errors.New(`ent: missing required field "SpacecraftArmament.armament_id"`)}
	}
	if _, ok := sac.mutation.SpacecraftID(); !ok {
		return &ValidationError{Name: "spacecraft", err: errors.New(`ent: missing required edge "SpacecraftArmament.spacecraft"`)}
	}
	if _, ok := sac.mutation.ArmamentID(); !ok {
		return &ValidationError{Name: "armament", err: errors.New(`ent: missing required edge "SpacecraftArmament.armament"`)}
	}
	return nil
}

func (sac *SpacecraftArmamentCreate) sqlSave(ctx context.Context) (*SpacecraftArmament, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *SpacecraftArmamentCreate) createSpec() (*SpacecraftArmament, *sqlgraph.CreateSpec) {
	var (
		_node = &SpacecraftArmament{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(spacecraftarmament.Table, sqlgraph.NewFieldSpec(spacecraftarmament.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sac.conflict
	if value, ok := sac.mutation.Qty(); ok {
		_spec.SetField(spacecraftarmament.FieldQty, field.TypeInt, value)
		_node.Qty = value
	}
	if nodes := sac.mutation.SpacecraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.SpacecraftTable,
			Columns: []string{spacecraftarmament.SpacecraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SpacecraftID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.ArmamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.ArmamentTable,
			Columns: []string{spacecraftarmament.ArmamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(armament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArmamentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SpacecraftArmament.Create().
//		SetQty(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpacecraftArmamentUpsert) {
//			SetQty(v+v).
//		}).
//		Exec(ctx)
func (sac *SpacecraftArmamentCreate) OnConflict(opts ...sql.ConflictOption) *SpacecraftArmamentUpsertOne {
	sac.conflict = opts
	return &SpacecraftArmamentUpsertOne{
		create: sac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SpacecraftArmament.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sac *SpacecraftArmamentCreate) OnConflictColumns(columns ...string) *SpacecraftArmamentUpsertOne {
	sac.conflict = append(sac.conflict, sql.ConflictColumns(columns...))
	return &SpacecraftArmamentUpsertOne{
		create: sac,
	}
}

type (
	// SpacecraftArmamentUpsertOne is the builder for "upsert"-ing
	//  one SpacecraftArmament node.
	SpacecraftArmamentUpsertOne struct {
		create *SpacecraftArmamentCreate
	}

	// SpacecraftArmamentUpsert is the "OnConflict" setter.
	SpacecraftArmamentUpsert struct {
		*sql.UpdateSet
	}
)

// SetQty sets the "qty" field.
func (u *SpacecraftArmamentUpsert) SetQty(v int) *SpacecraftArmamentUpsert {
	u.Set(spacecraftarmament.FieldQty, v)
	return u
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *SpacecraftArmamentUpsert) UpdateQty() *SpacecraftArmamentUpsert {
	u.SetExcluded(spacecraftarmament.FieldQty)
	return u
}

// AddQty adds v to the "qty" field.
func (u *SpacecraftArmamentUpsert) AddQty(v int) *SpacecraftArmamentUpsert {
	u.Add(spacecraftarmament.FieldQty, v)
	return u
}

// SetSpacecraftID sets the "spacecraft_id" field.
func (u *SpacecraftArmamentUpsert) SetSpacecraftID(v int) *SpacecraftArmamentUpsert {
	u.Set(spacecraftarmament.FieldSpacecraftID, v)
	return u
}

// UpdateSpacecraftID sets the "spacecraft_id" field to the value that was provided on create.
func (u *SpacecraftArmamentUpsert) UpdateSpacecraftID() *SpacecraftArmamentUpsert {
	u.SetExcluded(spacecraftarmament.FieldSpacecraftID)
	return u
}

// SetArmamentID sets the "armament_id" field.
func (u *SpacecraftArmamentUpsert) SetArmamentID(v int) *SpacecraftArmamentUpsert {
	u.Set(spacecraftarmament.FieldArmamentID, v)
	return u
}

// UpdateArmamentID sets the "armament_id" field to the value that was provided on create.
func (u *SpacecraftArmamentUpsert) UpdateArmamentID() *SpacecraftArmamentUpsert {
	u.SetExcluded(spacecraftarmament.FieldArmamentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SpacecraftArmament.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SpacecraftArmamentUpsertOne) UpdateNewValues() *SpacecraftArmamentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SpacecraftArmament.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SpacecraftArmamentUpsertOne) Ignore() *SpacecraftArmamentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpacecraftArmamentUpsertOne) DoNothing() *SpacecraftArmamentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpacecraftArmamentCreate.OnConflict
// documentation for more info.
func (u *SpacecraftArmamentUpsertOne) Update(set func(*SpacecraftArmamentUpsert)) *SpacecraftArmamentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpacecraftArmamentUpsert{UpdateSet: update})
	}))
	return u
}

// SetQty sets the "qty" field.
func (u *SpacecraftArmamentUpsertOne) SetQty(v int) *SpacecraftArmamentUpsertOne {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *SpacecraftArmamentUpsertOne) AddQty(v int) *SpacecraftArmamentUpsertOne {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *SpacecraftArmamentUpsertOne) UpdateQty() *SpacecraftArmamentUpsertOne {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.UpdateQty()
	})
}

// SetSpacecraftID sets the "spacecraft_id" field.
func (u *SpacecraftArmamentUpsertOne) SetSpacecraftID(v int) *SpacecraftArmamentUpsertOne {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.SetSpacecraftID(v)
	})
}

// UpdateSpacecraftID sets the "spacecraft_id" field to the value that was provided on create.
func (u *SpacecraftArmamentUpsertOne) UpdateSpacecraftID() *SpacecraftArmamentUpsertOne {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.UpdateSpacecraftID()
	})
}

// SetArmamentID sets the "armament_id" field.
func (u *SpacecraftArmamentUpsertOne) SetArmamentID(v int) *SpacecraftArmamentUpsertOne {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.SetArmamentID(v)
	})
}

// UpdateArmamentID sets the "armament_id" field to the value that was provided on create.
func (u *SpacecraftArmamentUpsertOne) UpdateArmamentID() *SpacecraftArmamentUpsertOne {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.UpdateArmamentID()
	})
}

// Exec executes the query.
func (u *SpacecraftArmamentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpacecraftArmamentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpacecraftArmamentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SpacecraftArmamentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SpacecraftArmamentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SpacecraftArmamentCreateBulk is the builder for creating many SpacecraftArmament entities in bulk.
type SpacecraftArmamentCreateBulk struct {
	config
	err      error
	builders []*SpacecraftArmamentCreate
	conflict []sql.ConflictOption
}

// Save creates the SpacecraftArmament entities in the database.
func (sacb *SpacecraftArmamentCreateBulk) Save(ctx context.Context) ([]*SpacecraftArmament, error) {
	if sacb.err != nil {
		return nil, sacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SpacecraftArmament, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpacecraftArmamentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SpacecraftArmamentCreateBulk) SaveX(ctx context.Context) []*SpacecraftArmament {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SpacecraftArmamentCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SpacecraftArmamentCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SpacecraftArmament.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpacecraftArmamentUpsert) {
//			SetQty(v+v).
//		}).
//		Exec(ctx)
func (sacb *SpacecraftArmamentCreateBulk) OnConflict(opts ...sql.ConflictOption) *SpacecraftArmamentUpsertBulk {
	sacb.conflict = opts
	return &SpacecraftArmamentUpsertBulk{
		create: sacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SpacecraftArmament.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sacb *SpacecraftArmamentCreateBulk) OnConflictColumns(columns ...string) *SpacecraftArmamentUpsertBulk {
	sacb.conflict = append(sacb.conflict, sql.ConflictColumns(columns...))
	return &SpacecraftArmamentUpsertBulk{
		create: sacb,
	}
}

// SpacecraftArmamentUpsertBulk is the builder for "upsert"-ing
// a bulk of SpacecraftArmament nodes.
type SpacecraftArmamentUpsertBulk struct {
	create *SpacecraftArmamentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SpacecraftArmament.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SpacecraftArmamentUpsertBulk) UpdateNewValues() *SpacecraftArmamentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SpacecraftArmament.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SpacecraftArmamentUpsertBulk) Ignore() *SpacecraftArmamentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpacecraftArmamentUpsertBulk) DoNothing() *SpacecraftArmamentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpacecraftArmamentCreateBulk.OnConflict
// documentation for more info.
func (u *SpacecraftArmamentUpsertBulk) Update(set func(*SpacecraftArmamentUpsert)) *SpacecraftArmamentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpacecraftArmamentUpsert{UpdateSet: update})
	}))
	return u
}

// SetQty sets the "qty" field.
func (u *SpacecraftArmamentUpsertBulk) SetQty(v int) *SpacecraftArmamentUpsertBulk {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *SpacecraftArmamentUpsertBulk) AddQty(v int) *SpacecraftArmamentUpsertBulk {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *SpacecraftArmamentUpsertBulk) UpdateQty() *SpacecraftArmamentUpsertBulk {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.UpdateQty()
	})
}

// SetSpacecraftID sets the "spacecraft_id" field.
func (u *SpacecraftArmamentUpsertBulk) SetSpacecraftID(v int) *SpacecraftArmamentUpsertBulk {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.SetSpacecraftID(v)
	})
}

// UpdateSpacecraftID sets the "spacecraft_id" field to the value that was provided on create.
func (u *SpacecraftArmamentUpsertBulk) UpdateSpacecraftID() *SpacecraftArmamentUpsertBulk {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.UpdateSpacecraftID()
	})
}

// SetArmamentID sets the "armament_id" field.
func (u *SpacecraftArmamentUpsertBulk) SetArmamentID(v int) *SpacecraftArmamentUpsertBulk {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.SetArmamentID(v)
	})
}

// UpdateArmamentID sets the "armament_id" field to the value that was provided on create.
func (u *SpacecraftArmamentUpsertBulk) UpdateArmamentID() *SpacecraftArmamentUpsertBulk {
	return u.Update(func(s *SpacecraftArmamentUpsert) {
		s.UpdateArmamentID()
	})
}

// Exec executes the query.
func (u *SpacecraftArmamentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SpacecraftArmamentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpacecraftArmamentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpacecraftArmamentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
