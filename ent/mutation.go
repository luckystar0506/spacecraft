// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spacecraft/ent/armament"
	"spacecraft/ent/predicate"
	"spacecraft/ent/spacecraft"
	"spacecraft/ent/spacecraftarmament"
	"spacecraft/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArmament           = "Armament"
	TypeSpacecraft         = "Spacecraft"
	TypeSpacecraftArmament = "SpacecraftArmament"
	TypeUser               = "User"
)

// ArmamentMutation represents an operation that mutates the Armament nodes in the graph.
type ArmamentMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	title              *string
	clearedFields      map[string]struct{}
	spacecrafts        map[int]struct{}
	removedspacecrafts map[int]struct{}
	clearedspacecrafts bool
	done               bool
	oldValue           func(context.Context) (*Armament, error)
	predicates         []predicate.Armament
}

var _ ent.Mutation = (*ArmamentMutation)(nil)

// armamentOption allows management of the mutation configuration using functional options.
type armamentOption func(*ArmamentMutation)

// newArmamentMutation creates new mutation for the Armament entity.
func newArmamentMutation(c config, op Op, opts ...armamentOption) *ArmamentMutation {
	m := &ArmamentMutation{
		config:        c,
		op:            op,
		typ:           TypeArmament,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArmamentID sets the ID field of the mutation.
func withArmamentID(id int) armamentOption {
	return func(m *ArmamentMutation) {
		var (
			err   error
			once  sync.Once
			value *Armament
		)
		m.oldValue = func(ctx context.Context) (*Armament, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Armament.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArmament sets the old Armament of the mutation.
func withArmament(node *Armament) armamentOption {
	return func(m *ArmamentMutation) {
		m.oldValue = func(context.Context) (*Armament, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArmamentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArmamentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArmamentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArmamentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Armament.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *ArmamentMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ArmamentMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Armament entity.
// If the Armament object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmamentMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ArmamentMutation) ResetTitle() {
	m.title = nil
}

// AddSpacecraftIDs adds the "spacecrafts" edge to the SpacecraftArmament entity by ids.
func (m *ArmamentMutation) AddSpacecraftIDs(ids ...int) {
	if m.spacecrafts == nil {
		m.spacecrafts = make(map[int]struct{})
	}
	for i := range ids {
		m.spacecrafts[ids[i]] = struct{}{}
	}
}

// ClearSpacecrafts clears the "spacecrafts" edge to the SpacecraftArmament entity.
func (m *ArmamentMutation) ClearSpacecrafts() {
	m.clearedspacecrafts = true
}

// SpacecraftsCleared reports if the "spacecrafts" edge to the SpacecraftArmament entity was cleared.
func (m *ArmamentMutation) SpacecraftsCleared() bool {
	return m.clearedspacecrafts
}

// RemoveSpacecraftIDs removes the "spacecrafts" edge to the SpacecraftArmament entity by IDs.
func (m *ArmamentMutation) RemoveSpacecraftIDs(ids ...int) {
	if m.removedspacecrafts == nil {
		m.removedspacecrafts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.spacecrafts, ids[i])
		m.removedspacecrafts[ids[i]] = struct{}{}
	}
}

// RemovedSpacecrafts returns the removed IDs of the "spacecrafts" edge to the SpacecraftArmament entity.
func (m *ArmamentMutation) RemovedSpacecraftsIDs() (ids []int) {
	for id := range m.removedspacecrafts {
		ids = append(ids, id)
	}
	return
}

// SpacecraftsIDs returns the "spacecrafts" edge IDs in the mutation.
func (m *ArmamentMutation) SpacecraftsIDs() (ids []int) {
	for id := range m.spacecrafts {
		ids = append(ids, id)
	}
	return
}

// ResetSpacecrafts resets all changes to the "spacecrafts" edge.
func (m *ArmamentMutation) ResetSpacecrafts() {
	m.spacecrafts = nil
	m.clearedspacecrafts = false
	m.removedspacecrafts = nil
}

// Where appends a list predicates to the ArmamentMutation builder.
func (m *ArmamentMutation) Where(ps ...predicate.Armament) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArmamentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArmamentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Armament, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArmamentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArmamentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Armament).
func (m *ArmamentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArmamentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.title != nil {
		fields = append(fields, armament.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArmamentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case armament.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArmamentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case armament.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Armament field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmamentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case armament.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Armament field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArmamentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArmamentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmamentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Armament numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArmamentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArmamentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArmamentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Armament nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArmamentMutation) ResetField(name string) error {
	switch name {
	case armament.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Armament field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArmamentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.spacecrafts != nil {
		edges = append(edges, armament.EdgeSpacecrafts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArmamentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case armament.EdgeSpacecrafts:
		ids := make([]ent.Value, 0, len(m.spacecrafts))
		for id := range m.spacecrafts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArmamentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedspacecrafts != nil {
		edges = append(edges, armament.EdgeSpacecrafts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArmamentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case armament.EdgeSpacecrafts:
		ids := make([]ent.Value, 0, len(m.removedspacecrafts))
		for id := range m.removedspacecrafts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArmamentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedspacecrafts {
		edges = append(edges, armament.EdgeSpacecrafts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArmamentMutation) EdgeCleared(name string) bool {
	switch name {
	case armament.EdgeSpacecrafts:
		return m.clearedspacecrafts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArmamentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Armament unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArmamentMutation) ResetEdge(name string) error {
	switch name {
	case armament.EdgeSpacecrafts:
		m.ResetSpacecrafts()
		return nil
	}
	return fmt.Errorf("unknown Armament edge %s", name)
}

// SpacecraftMutation represents an operation that mutates the Spacecraft nodes in the graph.
type SpacecraftMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	class            *string
	crew             *int
	addcrew          *int
	image            *string
	value            *float64
	addvalue         *float64
	status           *string
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	clearedFields    map[string]struct{}
	armaments        map[int]struct{}
	removedarmaments map[int]struct{}
	clearedarmaments bool
	done             bool
	oldValue         func(context.Context) (*Spacecraft, error)
	predicates       []predicate.Spacecraft
}

var _ ent.Mutation = (*SpacecraftMutation)(nil)

// spacecraftOption allows management of the mutation configuration using functional options.
type spacecraftOption func(*SpacecraftMutation)

// newSpacecraftMutation creates new mutation for the Spacecraft entity.
func newSpacecraftMutation(c config, op Op, opts ...spacecraftOption) *SpacecraftMutation {
	m := &SpacecraftMutation{
		config:        c,
		op:            op,
		typ:           TypeSpacecraft,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpacecraftID sets the ID field of the mutation.
func withSpacecraftID(id int) spacecraftOption {
	return func(m *SpacecraftMutation) {
		var (
			err   error
			once  sync.Once
			value *Spacecraft
		)
		m.oldValue = func(ctx context.Context) (*Spacecraft, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Spacecraft.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpacecraft sets the old Spacecraft of the mutation.
func withSpacecraft(node *Spacecraft) spacecraftOption {
	return func(m *SpacecraftMutation) {
		m.oldValue = func(context.Context) (*Spacecraft, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpacecraftMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpacecraftMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SpacecraftMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SpacecraftMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Spacecraft.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SpacecraftMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SpacecraftMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Spacecraft entity.
// If the Spacecraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SpacecraftMutation) ResetName() {
	m.name = nil
}

// SetClass sets the "class" field.
func (m *SpacecraftMutation) SetClass(s string) {
	m.class = &s
}

// Class returns the value of the "class" field in the mutation.
func (m *SpacecraftMutation) Class() (r string, exists bool) {
	v := m.class
	if v == nil {
		return
	}
	return *v, true
}

// OldClass returns the old "class" field's value of the Spacecraft entity.
// If the Spacecraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftMutation) OldClass(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClass is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClass requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClass: %w", err)
	}
	return oldValue.Class, nil
}

// ResetClass resets all changes to the "class" field.
func (m *SpacecraftMutation) ResetClass() {
	m.class = nil
}

// SetCrew sets the "crew" field.
func (m *SpacecraftMutation) SetCrew(i int) {
	m.crew = &i
	m.addcrew = nil
}

// Crew returns the value of the "crew" field in the mutation.
func (m *SpacecraftMutation) Crew() (r int, exists bool) {
	v := m.crew
	if v == nil {
		return
	}
	return *v, true
}

// OldCrew returns the old "crew" field's value of the Spacecraft entity.
// If the Spacecraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftMutation) OldCrew(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrew is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrew requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrew: %w", err)
	}
	return oldValue.Crew, nil
}

// AddCrew adds i to the "crew" field.
func (m *SpacecraftMutation) AddCrew(i int) {
	if m.addcrew != nil {
		*m.addcrew += i
	} else {
		m.addcrew = &i
	}
}

// AddedCrew returns the value that was added to the "crew" field in this mutation.
func (m *SpacecraftMutation) AddedCrew() (r int, exists bool) {
	v := m.addcrew
	if v == nil {
		return
	}
	return *v, true
}

// ResetCrew resets all changes to the "crew" field.
func (m *SpacecraftMutation) ResetCrew() {
	m.crew = nil
	m.addcrew = nil
}

// SetImage sets the "image" field.
func (m *SpacecraftMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *SpacecraftMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Spacecraft entity.
// If the Spacecraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *SpacecraftMutation) ResetImage() {
	m.image = nil
}

// SetValue sets the "value" field.
func (m *SpacecraftMutation) SetValue(f float64) {
	m.value = &f
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *SpacecraftMutation) Value() (r float64, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Spacecraft entity.
// If the Spacecraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftMutation) OldValue(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds f to the "value" field.
func (m *SpacecraftMutation) AddValue(f float64) {
	if m.addvalue != nil {
		*m.addvalue += f
	} else {
		m.addvalue = &f
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *SpacecraftMutation) AddedValue() (r float64, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *SpacecraftMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetStatus sets the "status" field.
func (m *SpacecraftMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SpacecraftMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Spacecraft entity.
// If the Spacecraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SpacecraftMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SpacecraftMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SpacecraftMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Spacecraft entity.
// If the Spacecraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SpacecraftMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[spacecraft.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SpacecraftMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[spacecraft.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SpacecraftMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, spacecraft.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SpacecraftMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SpacecraftMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Spacecraft entity.
// If the Spacecraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SpacecraftMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[spacecraft.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SpacecraftMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[spacecraft.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SpacecraftMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, spacecraft.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SpacecraftMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SpacecraftMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Spacecraft entity.
// If the Spacecraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SpacecraftMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[spacecraft.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SpacecraftMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[spacecraft.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SpacecraftMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, spacecraft.FieldDeletedAt)
}

// AddArmamentIDs adds the "armaments" edge to the SpacecraftArmament entity by ids.
func (m *SpacecraftMutation) AddArmamentIDs(ids ...int) {
	if m.armaments == nil {
		m.armaments = make(map[int]struct{})
	}
	for i := range ids {
		m.armaments[ids[i]] = struct{}{}
	}
}

// ClearArmaments clears the "armaments" edge to the SpacecraftArmament entity.
func (m *SpacecraftMutation) ClearArmaments() {
	m.clearedarmaments = true
}

// ArmamentsCleared reports if the "armaments" edge to the SpacecraftArmament entity was cleared.
func (m *SpacecraftMutation) ArmamentsCleared() bool {
	return m.clearedarmaments
}

// RemoveArmamentIDs removes the "armaments" edge to the SpacecraftArmament entity by IDs.
func (m *SpacecraftMutation) RemoveArmamentIDs(ids ...int) {
	if m.removedarmaments == nil {
		m.removedarmaments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.armaments, ids[i])
		m.removedarmaments[ids[i]] = struct{}{}
	}
}

// RemovedArmaments returns the removed IDs of the "armaments" edge to the SpacecraftArmament entity.
func (m *SpacecraftMutation) RemovedArmamentsIDs() (ids []int) {
	for id := range m.removedarmaments {
		ids = append(ids, id)
	}
	return
}

// ArmamentsIDs returns the "armaments" edge IDs in the mutation.
func (m *SpacecraftMutation) ArmamentsIDs() (ids []int) {
	for id := range m.armaments {
		ids = append(ids, id)
	}
	return
}

// ResetArmaments resets all changes to the "armaments" edge.
func (m *SpacecraftMutation) ResetArmaments() {
	m.armaments = nil
	m.clearedarmaments = false
	m.removedarmaments = nil
}

// Where appends a list predicates to the SpacecraftMutation builder.
func (m *SpacecraftMutation) Where(ps ...predicate.Spacecraft) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SpacecraftMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SpacecraftMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Spacecraft, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SpacecraftMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SpacecraftMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Spacecraft).
func (m *SpacecraftMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SpacecraftMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, spacecraft.FieldName)
	}
	if m.class != nil {
		fields = append(fields, spacecraft.FieldClass)
	}
	if m.crew != nil {
		fields = append(fields, spacecraft.FieldCrew)
	}
	if m.image != nil {
		fields = append(fields, spacecraft.FieldImage)
	}
	if m.value != nil {
		fields = append(fields, spacecraft.FieldValue)
	}
	if m.status != nil {
		fields = append(fields, spacecraft.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, spacecraft.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, spacecraft.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, spacecraft.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SpacecraftMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case spacecraft.FieldName:
		return m.Name()
	case spacecraft.FieldClass:
		return m.Class()
	case spacecraft.FieldCrew:
		return m.Crew()
	case spacecraft.FieldImage:
		return m.Image()
	case spacecraft.FieldValue:
		return m.Value()
	case spacecraft.FieldStatus:
		return m.Status()
	case spacecraft.FieldCreatedAt:
		return m.CreatedAt()
	case spacecraft.FieldUpdatedAt:
		return m.UpdatedAt()
	case spacecraft.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SpacecraftMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case spacecraft.FieldName:
		return m.OldName(ctx)
	case spacecraft.FieldClass:
		return m.OldClass(ctx)
	case spacecraft.FieldCrew:
		return m.OldCrew(ctx)
	case spacecraft.FieldImage:
		return m.OldImage(ctx)
	case spacecraft.FieldValue:
		return m.OldValue(ctx)
	case spacecraft.FieldStatus:
		return m.OldStatus(ctx)
	case spacecraft.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case spacecraft.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case spacecraft.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Spacecraft field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpacecraftMutation) SetField(name string, value ent.Value) error {
	switch name {
	case spacecraft.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case spacecraft.FieldClass:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClass(v)
		return nil
	case spacecraft.FieldCrew:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrew(v)
		return nil
	case spacecraft.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case spacecraft.FieldValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case spacecraft.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case spacecraft.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case spacecraft.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case spacecraft.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Spacecraft field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SpacecraftMutation) AddedFields() []string {
	var fields []string
	if m.addcrew != nil {
		fields = append(fields, spacecraft.FieldCrew)
	}
	if m.addvalue != nil {
		fields = append(fields, spacecraft.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SpacecraftMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case spacecraft.FieldCrew:
		return m.AddedCrew()
	case spacecraft.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpacecraftMutation) AddField(name string, value ent.Value) error {
	switch name {
	case spacecraft.FieldCrew:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCrew(v)
		return nil
	case spacecraft.FieldValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown Spacecraft numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SpacecraftMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(spacecraft.FieldCreatedAt) {
		fields = append(fields, spacecraft.FieldCreatedAt)
	}
	if m.FieldCleared(spacecraft.FieldUpdatedAt) {
		fields = append(fields, spacecraft.FieldUpdatedAt)
	}
	if m.FieldCleared(spacecraft.FieldDeletedAt) {
		fields = append(fields, spacecraft.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SpacecraftMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpacecraftMutation) ClearField(name string) error {
	switch name {
	case spacecraft.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case spacecraft.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case spacecraft.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Spacecraft nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SpacecraftMutation) ResetField(name string) error {
	switch name {
	case spacecraft.FieldName:
		m.ResetName()
		return nil
	case spacecraft.FieldClass:
		m.ResetClass()
		return nil
	case spacecraft.FieldCrew:
		m.ResetCrew()
		return nil
	case spacecraft.FieldImage:
		m.ResetImage()
		return nil
	case spacecraft.FieldValue:
		m.ResetValue()
		return nil
	case spacecraft.FieldStatus:
		m.ResetStatus()
		return nil
	case spacecraft.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case spacecraft.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case spacecraft.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Spacecraft field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SpacecraftMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.armaments != nil {
		edges = append(edges, spacecraft.EdgeArmaments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SpacecraftMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case spacecraft.EdgeArmaments:
		ids := make([]ent.Value, 0, len(m.armaments))
		for id := range m.armaments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SpacecraftMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedarmaments != nil {
		edges = append(edges, spacecraft.EdgeArmaments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SpacecraftMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case spacecraft.EdgeArmaments:
		ids := make([]ent.Value, 0, len(m.removedarmaments))
		for id := range m.removedarmaments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SpacecraftMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedarmaments {
		edges = append(edges, spacecraft.EdgeArmaments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SpacecraftMutation) EdgeCleared(name string) bool {
	switch name {
	case spacecraft.EdgeArmaments:
		return m.clearedarmaments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SpacecraftMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Spacecraft unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SpacecraftMutation) ResetEdge(name string) error {
	switch name {
	case spacecraft.EdgeArmaments:
		m.ResetArmaments()
		return nil
	}
	return fmt.Errorf("unknown Spacecraft edge %s", name)
}

// SpacecraftArmamentMutation represents an operation that mutates the SpacecraftArmament nodes in the graph.
type SpacecraftArmamentMutation struct {
	config
	op                Op
	typ               string
	id                *int
	qty               *int
	addqty            *int
	clearedFields     map[string]struct{}
	spacecraft        *int
	clearedspacecraft bool
	armament          *int
	clearedarmament   bool
	done              bool
	oldValue          func(context.Context) (*SpacecraftArmament, error)
	predicates        []predicate.SpacecraftArmament
}

var _ ent.Mutation = (*SpacecraftArmamentMutation)(nil)

// spacecraftarmamentOption allows management of the mutation configuration using functional options.
type spacecraftarmamentOption func(*SpacecraftArmamentMutation)

// newSpacecraftArmamentMutation creates new mutation for the SpacecraftArmament entity.
func newSpacecraftArmamentMutation(c config, op Op, opts ...spacecraftarmamentOption) *SpacecraftArmamentMutation {
	m := &SpacecraftArmamentMutation{
		config:        c,
		op:            op,
		typ:           TypeSpacecraftArmament,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpacecraftArmamentID sets the ID field of the mutation.
func withSpacecraftArmamentID(id int) spacecraftarmamentOption {
	return func(m *SpacecraftArmamentMutation) {
		var (
			err   error
			once  sync.Once
			value *SpacecraftArmament
		)
		m.oldValue = func(ctx context.Context) (*SpacecraftArmament, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SpacecraftArmament.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpacecraftArmament sets the old SpacecraftArmament of the mutation.
func withSpacecraftArmament(node *SpacecraftArmament) spacecraftarmamentOption {
	return func(m *SpacecraftArmamentMutation) {
		m.oldValue = func(context.Context) (*SpacecraftArmament, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpacecraftArmamentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpacecraftArmamentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SpacecraftArmamentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SpacecraftArmamentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SpacecraftArmament.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQty sets the "qty" field.
func (m *SpacecraftArmamentMutation) SetQty(i int) {
	m.qty = &i
	m.addqty = nil
}

// Qty returns the value of the "qty" field in the mutation.
func (m *SpacecraftArmamentMutation) Qty() (r int, exists bool) {
	v := m.qty
	if v == nil {
		return
	}
	return *v, true
}

// OldQty returns the old "qty" field's value of the SpacecraftArmament entity.
// If the SpacecraftArmament object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftArmamentMutation) OldQty(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQty: %w", err)
	}
	return oldValue.Qty, nil
}

// AddQty adds i to the "qty" field.
func (m *SpacecraftArmamentMutation) AddQty(i int) {
	if m.addqty != nil {
		*m.addqty += i
	} else {
		m.addqty = &i
	}
}

// AddedQty returns the value that was added to the "qty" field in this mutation.
func (m *SpacecraftArmamentMutation) AddedQty() (r int, exists bool) {
	v := m.addqty
	if v == nil {
		return
	}
	return *v, true
}

// ResetQty resets all changes to the "qty" field.
func (m *SpacecraftArmamentMutation) ResetQty() {
	m.qty = nil
	m.addqty = nil
}

// SetSpacecraftID sets the "spacecraft_id" field.
func (m *SpacecraftArmamentMutation) SetSpacecraftID(i int) {
	m.spacecraft = &i
}

// SpacecraftID returns the value of the "spacecraft_id" field in the mutation.
func (m *SpacecraftArmamentMutation) SpacecraftID() (r int, exists bool) {
	v := m.spacecraft
	if v == nil {
		return
	}
	return *v, true
}

// OldSpacecraftID returns the old "spacecraft_id" field's value of the SpacecraftArmament entity.
// If the SpacecraftArmament object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftArmamentMutation) OldSpacecraftID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpacecraftID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpacecraftID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpacecraftID: %w", err)
	}
	return oldValue.SpacecraftID, nil
}

// ResetSpacecraftID resets all changes to the "spacecraft_id" field.
func (m *SpacecraftArmamentMutation) ResetSpacecraftID() {
	m.spacecraft = nil
}

// SetArmamentID sets the "armament_id" field.
func (m *SpacecraftArmamentMutation) SetArmamentID(i int) {
	m.armament = &i
}

// ArmamentID returns the value of the "armament_id" field in the mutation.
func (m *SpacecraftArmamentMutation) ArmamentID() (r int, exists bool) {
	v := m.armament
	if v == nil {
		return
	}
	return *v, true
}

// OldArmamentID returns the old "armament_id" field's value of the SpacecraftArmament entity.
// If the SpacecraftArmament object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpacecraftArmamentMutation) OldArmamentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArmamentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArmamentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArmamentID: %w", err)
	}
	return oldValue.ArmamentID, nil
}

// ResetArmamentID resets all changes to the "armament_id" field.
func (m *SpacecraftArmamentMutation) ResetArmamentID() {
	m.armament = nil
}

// ClearSpacecraft clears the "spacecraft" edge to the Spacecraft entity.
func (m *SpacecraftArmamentMutation) ClearSpacecraft() {
	m.clearedspacecraft = true
	m.clearedFields[spacecraftarmament.FieldSpacecraftID] = struct{}{}
}

// SpacecraftCleared reports if the "spacecraft" edge to the Spacecraft entity was cleared.
func (m *SpacecraftArmamentMutation) SpacecraftCleared() bool {
	return m.clearedspacecraft
}

// SpacecraftIDs returns the "spacecraft" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SpacecraftID instead. It exists only for internal usage by the builders.
func (m *SpacecraftArmamentMutation) SpacecraftIDs() (ids []int) {
	if id := m.spacecraft; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSpacecraft resets all changes to the "spacecraft" edge.
func (m *SpacecraftArmamentMutation) ResetSpacecraft() {
	m.spacecraft = nil
	m.clearedspacecraft = false
}

// ClearArmament clears the "armament" edge to the Armament entity.
func (m *SpacecraftArmamentMutation) ClearArmament() {
	m.clearedarmament = true
	m.clearedFields[spacecraftarmament.FieldArmamentID] = struct{}{}
}

// ArmamentCleared reports if the "armament" edge to the Armament entity was cleared.
func (m *SpacecraftArmamentMutation) ArmamentCleared() bool {
	return m.clearedarmament
}

// ArmamentIDs returns the "armament" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArmamentID instead. It exists only for internal usage by the builders.
func (m *SpacecraftArmamentMutation) ArmamentIDs() (ids []int) {
	if id := m.armament; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArmament resets all changes to the "armament" edge.
func (m *SpacecraftArmamentMutation) ResetArmament() {
	m.armament = nil
	m.clearedarmament = false
}

// Where appends a list predicates to the SpacecraftArmamentMutation builder.
func (m *SpacecraftArmamentMutation) Where(ps ...predicate.SpacecraftArmament) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SpacecraftArmamentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SpacecraftArmamentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SpacecraftArmament, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SpacecraftArmamentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SpacecraftArmamentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SpacecraftArmament).
func (m *SpacecraftArmamentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SpacecraftArmamentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.qty != nil {
		fields = append(fields, spacecraftarmament.FieldQty)
	}
	if m.spacecraft != nil {
		fields = append(fields, spacecraftarmament.FieldSpacecraftID)
	}
	if m.armament != nil {
		fields = append(fields, spacecraftarmament.FieldArmamentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SpacecraftArmamentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case spacecraftarmament.FieldQty:
		return m.Qty()
	case spacecraftarmament.FieldSpacecraftID:
		return m.SpacecraftID()
	case spacecraftarmament.FieldArmamentID:
		return m.ArmamentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SpacecraftArmamentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case spacecraftarmament.FieldQty:
		return m.OldQty(ctx)
	case spacecraftarmament.FieldSpacecraftID:
		return m.OldSpacecraftID(ctx)
	case spacecraftarmament.FieldArmamentID:
		return m.OldArmamentID(ctx)
	}
	return nil, fmt.Errorf("unknown SpacecraftArmament field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpacecraftArmamentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case spacecraftarmament.FieldQty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQty(v)
		return nil
	case spacecraftarmament.FieldSpacecraftID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpacecraftID(v)
		return nil
	case spacecraftarmament.FieldArmamentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArmamentID(v)
		return nil
	}
	return fmt.Errorf("unknown SpacecraftArmament field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SpacecraftArmamentMutation) AddedFields() []string {
	var fields []string
	if m.addqty != nil {
		fields = append(fields, spacecraftarmament.FieldQty)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SpacecraftArmamentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case spacecraftarmament.FieldQty:
		return m.AddedQty()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpacecraftArmamentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case spacecraftarmament.FieldQty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQty(v)
		return nil
	}
	return fmt.Errorf("unknown SpacecraftArmament numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SpacecraftArmamentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SpacecraftArmamentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpacecraftArmamentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SpacecraftArmament nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SpacecraftArmamentMutation) ResetField(name string) error {
	switch name {
	case spacecraftarmament.FieldQty:
		m.ResetQty()
		return nil
	case spacecraftarmament.FieldSpacecraftID:
		m.ResetSpacecraftID()
		return nil
	case spacecraftarmament.FieldArmamentID:
		m.ResetArmamentID()
		return nil
	}
	return fmt.Errorf("unknown SpacecraftArmament field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SpacecraftArmamentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.spacecraft != nil {
		edges = append(edges, spacecraftarmament.EdgeSpacecraft)
	}
	if m.armament != nil {
		edges = append(edges, spacecraftarmament.EdgeArmament)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SpacecraftArmamentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case spacecraftarmament.EdgeSpacecraft:
		if id := m.spacecraft; id != nil {
			return []ent.Value{*id}
		}
	case spacecraftarmament.EdgeArmament:
		if id := m.armament; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SpacecraftArmamentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SpacecraftArmamentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SpacecraftArmamentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedspacecraft {
		edges = append(edges, spacecraftarmament.EdgeSpacecraft)
	}
	if m.clearedarmament {
		edges = append(edges, spacecraftarmament.EdgeArmament)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SpacecraftArmamentMutation) EdgeCleared(name string) bool {
	switch name {
	case spacecraftarmament.EdgeSpacecraft:
		return m.clearedspacecraft
	case spacecraftarmament.EdgeArmament:
		return m.clearedarmament
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SpacecraftArmamentMutation) ClearEdge(name string) error {
	switch name {
	case spacecraftarmament.EdgeSpacecraft:
		m.ClearSpacecraft()
		return nil
	case spacecraftarmament.EdgeArmament:
		m.ClearArmament()
		return nil
	}
	return fmt.Errorf("unknown SpacecraftArmament unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SpacecraftArmamentMutation) ResetEdge(name string) error {
	switch name {
	case spacecraftarmament.EdgeSpacecraft:
		m.ResetSpacecraft()
		return nil
	case spacecraftarmament.EdgeArmament:
		m.ResetArmament()
		return nil
	}
	return fmt.Errorf("unknown SpacecraftArmament edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	password      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
