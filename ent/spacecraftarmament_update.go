// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spacecraft/ent/armament"
	"spacecraft/ent/predicate"
	"spacecraft/ent/spacecraft"
	"spacecraft/ent/spacecraftarmament"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpacecraftArmamentUpdate is the builder for updating SpacecraftArmament entities.
type SpacecraftArmamentUpdate struct {
	config
	hooks    []Hook
	mutation *SpacecraftArmamentMutation
}

// Where appends a list predicates to the SpacecraftArmamentUpdate builder.
func (sau *SpacecraftArmamentUpdate) Where(ps ...predicate.SpacecraftArmament) *SpacecraftArmamentUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetQty sets the "qty" field.
func (sau *SpacecraftArmamentUpdate) SetQty(i int) *SpacecraftArmamentUpdate {
	sau.mutation.ResetQty()
	sau.mutation.SetQty(i)
	return sau
}

// AddQty adds i to the "qty" field.
func (sau *SpacecraftArmamentUpdate) AddQty(i int) *SpacecraftArmamentUpdate {
	sau.mutation.AddQty(i)
	return sau
}

// SetSpacecraftID sets the "spacecraft_id" field.
func (sau *SpacecraftArmamentUpdate) SetSpacecraftID(i int) *SpacecraftArmamentUpdate {
	sau.mutation.SetSpacecraftID(i)
	return sau
}

// SetArmamentID sets the "armament_id" field.
func (sau *SpacecraftArmamentUpdate) SetArmamentID(i int) *SpacecraftArmamentUpdate {
	sau.mutation.SetArmamentID(i)
	return sau
}

// SetSpacecraft sets the "spacecraft" edge to the Spacecraft entity.
func (sau *SpacecraftArmamentUpdate) SetSpacecraft(s *Spacecraft) *SpacecraftArmamentUpdate {
	return sau.SetSpacecraftID(s.ID)
}

// SetArmament sets the "armament" edge to the Armament entity.
func (sau *SpacecraftArmamentUpdate) SetArmament(a *Armament) *SpacecraftArmamentUpdate {
	return sau.SetArmamentID(a.ID)
}

// Mutation returns the SpacecraftArmamentMutation object of the builder.
func (sau *SpacecraftArmamentUpdate) Mutation() *SpacecraftArmamentMutation {
	return sau.mutation
}

// ClearSpacecraft clears the "spacecraft" edge to the Spacecraft entity.
func (sau *SpacecraftArmamentUpdate) ClearSpacecraft() *SpacecraftArmamentUpdate {
	sau.mutation.ClearSpacecraft()
	return sau
}

// ClearArmament clears the "armament" edge to the Armament entity.
func (sau *SpacecraftArmamentUpdate) ClearArmament() *SpacecraftArmamentUpdate {
	sau.mutation.ClearArmament()
	return sau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SpacecraftArmamentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SpacecraftArmamentUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SpacecraftArmamentUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SpacecraftArmamentUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sau *SpacecraftArmamentUpdate) check() error {
	if _, ok := sau.mutation.SpacecraftID(); sau.mutation.SpacecraftCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SpacecraftArmament.spacecraft"`)
	}
	if _, ok := sau.mutation.ArmamentID(); sau.mutation.ArmamentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SpacecraftArmament.armament"`)
	}
	return nil
}

func (sau *SpacecraftArmamentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(spacecraftarmament.Table, spacecraftarmament.Columns, sqlgraph.NewFieldSpec(spacecraftarmament.FieldID, field.TypeInt))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.Qty(); ok {
		_spec.SetField(spacecraftarmament.FieldQty, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedQty(); ok {
		_spec.AddField(spacecraftarmament.FieldQty, field.TypeInt, value)
	}
	if sau.mutation.SpacecraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.SpacecraftTable,
			Columns: []string{spacecraftarmament.SpacecraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.SpacecraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.SpacecraftTable,
			Columns: []string{spacecraftarmament.SpacecraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.ArmamentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.ArmamentTable,
			Columns: []string{spacecraftarmament.ArmamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(armament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.ArmamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.ArmamentTable,
			Columns: []string{spacecraftarmament.ArmamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(armament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacecraftarmament.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SpacecraftArmamentUpdateOne is the builder for updating a single SpacecraftArmament entity.
type SpacecraftArmamentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpacecraftArmamentMutation
}

// SetQty sets the "qty" field.
func (sauo *SpacecraftArmamentUpdateOne) SetQty(i int) *SpacecraftArmamentUpdateOne {
	sauo.mutation.ResetQty()
	sauo.mutation.SetQty(i)
	return sauo
}

// AddQty adds i to the "qty" field.
func (sauo *SpacecraftArmamentUpdateOne) AddQty(i int) *SpacecraftArmamentUpdateOne {
	sauo.mutation.AddQty(i)
	return sauo
}

// SetSpacecraftID sets the "spacecraft_id" field.
func (sauo *SpacecraftArmamentUpdateOne) SetSpacecraftID(i int) *SpacecraftArmamentUpdateOne {
	sauo.mutation.SetSpacecraftID(i)
	return sauo
}

// SetArmamentID sets the "armament_id" field.
func (sauo *SpacecraftArmamentUpdateOne) SetArmamentID(i int) *SpacecraftArmamentUpdateOne {
	sauo.mutation.SetArmamentID(i)
	return sauo
}

// SetSpacecraft sets the "spacecraft" edge to the Spacecraft entity.
func (sauo *SpacecraftArmamentUpdateOne) SetSpacecraft(s *Spacecraft) *SpacecraftArmamentUpdateOne {
	return sauo.SetSpacecraftID(s.ID)
}

// SetArmament sets the "armament" edge to the Armament entity.
func (sauo *SpacecraftArmamentUpdateOne) SetArmament(a *Armament) *SpacecraftArmamentUpdateOne {
	return sauo.SetArmamentID(a.ID)
}

// Mutation returns the SpacecraftArmamentMutation object of the builder.
func (sauo *SpacecraftArmamentUpdateOne) Mutation() *SpacecraftArmamentMutation {
	return sauo.mutation
}

// ClearSpacecraft clears the "spacecraft" edge to the Spacecraft entity.
func (sauo *SpacecraftArmamentUpdateOne) ClearSpacecraft() *SpacecraftArmamentUpdateOne {
	sauo.mutation.ClearSpacecraft()
	return sauo
}

// ClearArmament clears the "armament" edge to the Armament entity.
func (sauo *SpacecraftArmamentUpdateOne) ClearArmament() *SpacecraftArmamentUpdateOne {
	sauo.mutation.ClearArmament()
	return sauo
}

// Where appends a list predicates to the SpacecraftArmamentUpdate builder.
func (sauo *SpacecraftArmamentUpdateOne) Where(ps ...predicate.SpacecraftArmament) *SpacecraftArmamentUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SpacecraftArmamentUpdateOne) Select(field string, fields ...string) *SpacecraftArmamentUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SpacecraftArmament entity.
func (sauo *SpacecraftArmamentUpdateOne) Save(ctx context.Context) (*SpacecraftArmament, error) {
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SpacecraftArmamentUpdateOne) SaveX(ctx context.Context) *SpacecraftArmament {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SpacecraftArmamentUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SpacecraftArmamentUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauo *SpacecraftArmamentUpdateOne) check() error {
	if _, ok := sauo.mutation.SpacecraftID(); sauo.mutation.SpacecraftCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SpacecraftArmament.spacecraft"`)
	}
	if _, ok := sauo.mutation.ArmamentID(); sauo.mutation.ArmamentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SpacecraftArmament.armament"`)
	}
	return nil
}

func (sauo *SpacecraftArmamentUpdateOne) sqlSave(ctx context.Context) (_node *SpacecraftArmament, err error) {
	if err := sauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(spacecraftarmament.Table, spacecraftarmament.Columns, sqlgraph.NewFieldSpec(spacecraftarmament.FieldID, field.TypeInt))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpacecraftArmament.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spacecraftarmament.FieldID)
		for _, f := range fields {
			if !spacecraftarmament.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spacecraftarmament.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.Qty(); ok {
		_spec.SetField(spacecraftarmament.FieldQty, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedQty(); ok {
		_spec.AddField(spacecraftarmament.FieldQty, field.TypeInt, value)
	}
	if sauo.mutation.SpacecraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.SpacecraftTable,
			Columns: []string{spacecraftarmament.SpacecraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.SpacecraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.SpacecraftTable,
			Columns: []string{spacecraftarmament.SpacecraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spacecraft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.ArmamentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.ArmamentTable,
			Columns: []string{spacecraftarmament.ArmamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(armament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.ArmamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spacecraftarmament.ArmamentTable,
			Columns: []string{spacecraftarmament.ArmamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(armament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SpacecraftArmament{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacecraftarmament.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
