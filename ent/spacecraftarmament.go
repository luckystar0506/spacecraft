// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"spacecraft/ent/armament"
	"spacecraft/ent/spacecraft"
	"spacecraft/ent/spacecraftarmament"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SpacecraftArmament is the model entity for the SpacecraftArmament schema.
type SpacecraftArmament struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty int `json:"qty,omitempty"`
	// SpacecraftID holds the value of the "spacecraft_id" field.
	SpacecraftID int `json:"spacecraft_id,omitempty"`
	// ArmamentID holds the value of the "armament_id" field.
	ArmamentID int `json:"armament_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpacecraftArmamentQuery when eager-loading is set.
	Edges        SpacecraftArmamentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SpacecraftArmamentEdges holds the relations/edges for other nodes in the graph.
type SpacecraftArmamentEdges struct {
	// Spacecraft holds the value of the spacecraft edge.
	Spacecraft *Spacecraft `json:"spacecraft,omitempty"`
	// Armament holds the value of the armament edge.
	Armament *Armament `json:"armament,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SpacecraftOrErr returns the Spacecraft value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpacecraftArmamentEdges) SpacecraftOrErr() (*Spacecraft, error) {
	if e.loadedTypes[0] {
		if e.Spacecraft == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: spacecraft.Label}
		}
		return e.Spacecraft, nil
	}
	return nil, &NotLoadedError{edge: "spacecraft"}
}

// ArmamentOrErr returns the Armament value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpacecraftArmamentEdges) ArmamentOrErr() (*Armament, error) {
	if e.loadedTypes[1] {
		if e.Armament == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: armament.Label}
		}
		return e.Armament, nil
	}
	return nil, &NotLoadedError{edge: "armament"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpacecraftArmament) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spacecraftarmament.FieldID, spacecraftarmament.FieldQty, spacecraftarmament.FieldSpacecraftID, spacecraftarmament.FieldArmamentID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpacecraftArmament fields.
func (sa *SpacecraftArmament) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spacecraftarmament.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = int(value.Int64)
		case spacecraftarmament.FieldQty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				sa.Qty = int(value.Int64)
			}
		case spacecraftarmament.FieldSpacecraftID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spacecraft_id", values[i])
			} else if value.Valid {
				sa.SpacecraftID = int(value.Int64)
			}
		case spacecraftarmament.FieldArmamentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field armament_id", values[i])
			} else if value.Valid {
				sa.ArmamentID = int(value.Int64)
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpacecraftArmament.
// This includes values selected through modifiers, order, etc.
func (sa *SpacecraftArmament) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// QuerySpacecraft queries the "spacecraft" edge of the SpacecraftArmament entity.
func (sa *SpacecraftArmament) QuerySpacecraft() *SpacecraftQuery {
	return NewSpacecraftArmamentClient(sa.config).QuerySpacecraft(sa)
}

// QueryArmament queries the "armament" edge of the SpacecraftArmament entity.
func (sa *SpacecraftArmament) QueryArmament() *ArmamentQuery {
	return NewSpacecraftArmamentClient(sa.config).QueryArmament(sa)
}

// Update returns a builder for updating this SpacecraftArmament.
// Note that you need to call SpacecraftArmament.Unwrap() before calling this method if this SpacecraftArmament
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SpacecraftArmament) Update() *SpacecraftArmamentUpdateOne {
	return NewSpacecraftArmamentClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the SpacecraftArmament entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SpacecraftArmament) Unwrap() *SpacecraftArmament {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpacecraftArmament is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SpacecraftArmament) String() string {
	var builder strings.Builder
	builder.WriteString("SpacecraftArmament(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", sa.Qty))
	builder.WriteString(", ")
	builder.WriteString("spacecraft_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.SpacecraftID))
	builder.WriteString(", ")
	builder.WriteString("armament_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.ArmamentID))
	builder.WriteByte(')')
	return builder.String()
}

// SpacecraftArmaments is a parsable slice of SpacecraftArmament.
type SpacecraftArmaments []*SpacecraftArmament
